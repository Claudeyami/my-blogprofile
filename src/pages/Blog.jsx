import { useState, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';

const Blog = () => {
  const [selectedPost, setSelectedPost] = useState(null);
  const location = useLocation();

  // Check for post ID in URL query params
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const postId = searchParams.get('id');
    if (postId) {
      setSelectedPost(parseInt(postId));
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  }, [location.search]);

  // Scroll to top when post changes
  useEffect(() => {
    if (selectedPost) {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  }, [selectedPost]);

  // Function to render content with formatted code blocks
  const renderContent = (content) => {
    const parts = content.split('```');
    
    return parts.map((part, index) => {
      if (index % 2 === 1) {
        // This is a code block
        const lines = part.split('\n');
        const language = lines[0].trim();
        const code = lines.slice(1).join('\n');
        
        return (
          <div key={index} style={{
            backgroundColor: '#1e293b',
            borderRadius: '12px',
            padding: '20px',
            margin: '24px 0',
            border: '1px solid #334155',
            overflow: 'auto'
          }}>
            {language && (
              <div style={{
                color: '#94a3b8',
                fontSize: '12px',
                fontWeight: '600',
                marginBottom: '12px',
                textTransform: 'uppercase',
                letterSpacing: '0.5px'
              }}>
                {language}
              </div>
            )}
            <pre style={{
              margin: 0,
              fontFamily: "'Fira Code', 'Courier New', monospace",
              fontSize: '14px',
              lineHeight: '1.6',
              color: '#e2e8f0',
              whiteSpace: 'pre-wrap',
              wordBreak: 'break-word'
            }}>
              <code>{code}</code>
            </pre>
          </div>
        );
      } else {
        // Regular text - parse for ### headers and ** bold
        return (
          <div key={index}>
            {part.split('\n').map((line, lineIndex) => {
              // Check for ### headers
              if (line.startsWith('### ')) {
                return (
                  <h3 key={lineIndex} style={{
                    fontSize: '24px',
                    fontWeight: 'bold',
                    color: '#1e293b',
                    marginTop: '32px',
                    marginBottom: '16px'
                  }}>
                    {line.replace('### ', '')}
                  </h3>
                );
              }
              
              // Parse line for inline code (`) and bold text (**)
              const parseInlineFormatting = (text) => {
                const elements = [];
                let currentText = text;
                let key = 0;

                while (currentText.length > 0) {
                  // Check for inline code first
                  const codeMatch = currentText.match(/`([^`]+)`/);
                  const boldMatch = currentText.match(/\*\*([^*]+)\*\*/);

                  // Determine which comes first
                  let nextMatch = null;
                  let type = null;

                  if (codeMatch && boldMatch) {
                    if (currentText.indexOf(codeMatch[0]) < currentText.indexOf(boldMatch[0])) {
                      nextMatch = codeMatch;
                      type = 'code';
                    } else {
                      nextMatch = boldMatch;
                      type = 'bold';
                    }
                  } else if (codeMatch) {
                    nextMatch = codeMatch;
                    type = 'code';
                  } else if (boldMatch) {
                    nextMatch = boldMatch;
                    type = 'bold';
                  }

                  if (nextMatch) {
                    const beforeMatch = currentText.substring(0, currentText.indexOf(nextMatch[0]));
                    if (beforeMatch) {
                      elements.push(<span key={key++}>{beforeMatch}</span>);
                    }

                    if (type === 'code') {
                      elements.push(
                        <code key={key++} style={{
                          backgroundColor: '#f1f5f9',
                          color: '#dc2626',
                          padding: '2px 6px',
                          borderRadius: '4px',
                          fontSize: '14px',
                          fontFamily: "'Fira Code', 'Courier New', monospace"
                        }}>
                          {nextMatch[1]}
                        </code>
                      );
                    } else {
                      elements.push(
                        <strong key={key++} style={{ fontWeight: '700', color: '#1e293b' }}>
                          {nextMatch[1]}
                        </strong>
                      );
                    }

                    currentText = currentText.substring(currentText.indexOf(nextMatch[0]) + nextMatch[0].length);
                  } else {
                    elements.push(<span key={key++}>{currentText}</span>);
                    break;
                  }
                }

                return elements.length > 0 ? elements : text;
              };

              // Regular paragraph
              if (line.trim()) {
                return (
                  <p key={lineIndex} style={{
                    fontSize: '16px',
                    lineHeight: '1.8',
                    color: '#334155',
                    marginBottom: '16px'
                  }}>
                    {parseInlineFormatting(line)}
                  </p>
                );
              }
              return null;
            })}
          </div>
        );
      }
    });
  };

  const blogPosts = [
    {
      id: 1,
      title: 'var, let v√† const ‚Äì C√¢u chuy·ªán 3 th·∫ø h·ªá trong JavaScript',
      category: 'JavaScript',
      date: '22 Oct 2025',
      readTime: '5 ph√∫t',
      excerpt: 'Ng√†y x∆∞a, JavaScript ch·ªâ c√≥ var, v√† c·∫£ th·∫ø gi·ªõi dev ph·∫£i ch·ªãu ƒë·ª±ng h√†ng ng√†n bug kh√≥ hi·ªÉu. R·ªìi let v√† const ra ƒë·ªùi (ES6), c·ª©u r·ªói nh√¢n lo·∫°i...',
      content: `
Ng√†y x∆∞a, JavaScript ch·ªâ c√≥ \`var\`, v√† c·∫£ th·∫ø gi·ªõi dev ph·∫£i ch·ªãu ƒë·ª±ng h√†ng ng√†n bug kh√≥ hi·ªÉu ch·ªâ v√¨ n√≥.
R·ªìi \`let\` v√† \`const\` ra ƒë·ªùi (ES6), c·ª©u r·ªói nh√¢n lo·∫°i. N·∫øu \`var\` l√† "√¥ng ch√∫ l·ªôn x·ªôn", th√¨ \`let\` l√† "anh trai c·∫©n th·∫≠n" c√≤n \`const\` l√† "ƒë·ª©a em nguy√™n t·∫Øc".

### V√≠ d·ª• kinh ƒëi·ªÉn:

\`\`\`javascript
for (var i = 0; i < 3; i++) {
  setTimeout(() => console.log(i), 100);
}
// 3 3 3 üò≠ (v√¨ var global)

for (let j = 0; j < 3; j++) {
  setTimeout(() => console.log(j), 100);
}
// 0 1 2 ‚úÖ
\`\`\`

### So s√°nh nhanh:

* **var**: function scope, hoisting, d·ªÖ g√¢y bug.
* **let**: block scope, an to√†n h∆°n.
* **const**: b·∫•t bi·∫øn, c·ª±c h·ª£p cho config v√† object tƒ©nh.

### B√†i h·ªçc dev:
"N·∫øu kh√¥ng mu·ªën bug, h√£y const. N·∫øu th·∫≠t s·ª± c·∫ßn thay ƒë·ªïi, h√£y let. C√≤n var‚Ä¶ h√£y ƒë·ªÉ n√≥ y√™n ngh·ªâ." ‚ò†Ô∏è
      `
    },
    {
      id: 2,
      title: 'Arrow Function vs Regular Function ‚Äì Khi JavaScript h·ªçc vi·∫øt t·∫Øt',
      category: 'JavaScript',
      date: '20 Oct 2025',
      readTime: '6 ph√∫t',
      excerpt: 'Arrow function (=>) xu·∫•t hi·ªán v√† dev kh·∫Øp th·∫ø gi·ªõi nh∆∞ ƒë∆∞·ª£c khai s√°ng: "Tr·ªùi ∆°i, code ng·∫Øn m√† ch·∫°y ƒë∆∞·ª£c n√®!"',
      content: `
Arrow function (\`=>\`) xu·∫•t hi·ªán v√† dev kh·∫Øp th·∫ø gi·ªõi nh∆∞ ƒë∆∞·ª£c khai s√°ng:
"Tr·ªùi ∆°i, code ng·∫Øn m√† ch·∫°y ƒë∆∞·ª£c n√®!"

### So s√°nh c√∫ ph√°p:

\`\`\`javascript
// Regular
function hello(name) {
  return "Xin ch√†o " + name;
}

// Arrow
const hello = name => \`Xin ch√†o \${name}\`;
\`\`\`

Ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc, nh∆∞ng c·∫©n th·∫≠n: **Arrow function kh√¥ng c√≥ \`this\` ri√™ng!**

### V√≠ d·ª• v·ªÅ this:

\`\`\`javascript
function Cat() {
  this.age = 0;
  setInterval(() => this.age++, 1000);
}
\`\`\`

·ªû ƒë√¢y \`this\` tr·ªè t·ªõi Cat v√¨ arrow "m∆∞·ª£n" \`this\` c·ªßa ph·∫°m vi ngo√†i.
Tuy·ªát v·ªùi khi l√†m vi·ªác trong React ho·∫∑c callback, nh∆∞ng **ƒë·ª´ng d√πng arrow trong object method** ‚Äì b·∫°n s·∫Ω t·ª± b·∫Øn v√†o ch√¢n m√¨nh ü§ï

### Kinh nghi·ªám x∆∞∆°ng m√°u:
Arrow function gi√∫p b·∫°n code nhanh, nh∆∞ng hi·ªÉu "this" m·ªõi gi√∫p b·∫°n code ƒë√∫ng.
      `
    },
    {
      id: 3,
      title: 'Closure ‚Äì Khi h√†m c√≥ tr√≠ nh·ªõ üß†',
      category: 'JavaScript',
      date: '18 Oct 2025',
      readTime: '8 ph√∫t',
      excerpt: 'Closure l√† l√Ω do khi·∫øn JavaScript v·ª´a m·∫°nh v·ª´a "ma m·ªã". M·ªôt h√†m c√≥ th·ªÉ nh·ªõ bi·∫øn b√™n ngo√†i n√≥, ngay c·∫£ khi h√†m cha ƒë√£ ch·∫°y xong!',
      content: `
Closure l√† l√Ω do khi·∫øn JavaScript v·ª´a m·∫°nh v·ª´a "ma m·ªã".
M·ªôt h√†m c√≥ th·ªÉ *nh·ªõ* bi·∫øn b√™n ngo√†i n√≥, ngay c·∫£ khi h√†m cha ƒë√£ ch·∫°y xong!

### V√≠ d·ª• c∆° b·∫£n:

\`\`\`javascript
function counter() {
  let count = 0;
  return () => ++count;
}

const click = counter();
console.log(click()); // 1
console.log(click()); // 2
\`\`\`

Bi·∫øn \`count\` kh√¥ng bi·∫øn m·∫•t v√¨ closure gi·ªØ n√≥ l·∫°i ‚Äì nh∆∞ m·ªôt "n√£o ph·ª•" cho h√†m con.

### ·ª®ng d·ª•ng closure:

* T·∫°o **private variable**
* Gi·∫£m **global variable**
* D√πng trong **React hook** ho·∫∑c **debounce**

### K·∫øt lu·∫≠n:
üòÑ ƒê·ª´ng ng·∫°c nhi√™n n·∫øu b·∫°n th·∫•y closure trong m·ªçi th∆∞ vi·ªán JS b·∫°n y√™u th√≠ch ‚Äî n√≥ gi·ªëng nh∆∞ linh h·ªìn c·ªßa ng√¥n ng·ªØ v·∫≠y.
      `
    },
    {
      id: 4,
      title: 'Event Loop ‚Äì Tr√°i tim b·∫•t ƒë·ªìng b·ªô c·ªßa JavaScript',
      category: 'JavaScript',
      date: '16 Oct 2025',
      readTime: '10 ph√∫t',
      excerpt: 'B·∫°n t·ª´ng g·∫∑p d√≤ng log "xu·∫•t hi·ªán l·ªôn x·ªôn" m√† kh√¥ng hi·ªÉu t·∫°i sao ch∆∞a? Ch√†o m·ª´ng ƒë·∫øn Event Loop, h·ªá th·ªëng khi·∫øn JS "ƒëa nhi·ªám" d√π ch·ªâ c√≥ m·ªôt lu·ªìng.',
      content: `
B·∫°n t·ª´ng g·∫∑p d√≤ng log "xu·∫•t hi·ªán l·ªôn x·ªôn" m√† kh√¥ng hi·ªÉu t·∫°i sao ch∆∞a?
Ch√†o m·ª´ng ƒë·∫øn **Event Loop**, h·ªá th·ªëng khi·∫øn JS "ƒëa nhi·ªám" d√π ch·ªâ c√≥ m·ªôt lu·ªìng.

### V√≠ d·ª• kinh ƒëi·ªÉn:

\`\`\`javascript
console.log("A");
setTimeout(() => console.log("B"), 0);
console.log("C");
// Output: A ‚Üí C ‚Üí B
\`\`\`

### C√°ch ho·∫°t ƒë·ªông:

JavaScript ch·∫°y theo th·ª© t·ª±: **Call Stack ‚Üí Callback Queue ‚Üí Event Loop**.
C√°c l·ªánh ƒë·ªìng b·ªô ch·∫°y tr∆∞·ªõc, b·∫•t ƒë·ªìng b·ªô (nh∆∞ \`setTimeout\`, \`fetch\`) ƒë·ª£i Event Loop "r·∫£nh" m·ªõi nh·∫£y v√†o.

### C√°c th√†nh ph·∫ßn:

1. **Call Stack**: N∆°i th·ª±c thi code ƒë·ªìng b·ªô
2. **Web APIs**: X·ª≠ l√Ω setTimeout, fetch, DOM events
3. **Task Queue**: H√†ng ƒë·ª£i callback
4. **Microtask Queue**: ∆Øu ti√™n cao h∆°n (Promise)

### K·∫øt lu·∫≠n:
üß© Hi·ªÉu ƒë∆∞·ª£c Event Loop, b·∫°n hi·ªÉu ƒë∆∞·ª£c JavaScript.
V√† khi ai ƒë√≥ n√≥i "JS ƒë∆°n lu·ªìng m√† ch·∫°y ƒëa nhi·ªám", b·∫°n c√≥ quy·ªÅn m·ªâm c∆∞·ªùi tinh t·∫ø üòè.
      `
    },
    {
      id: 5,
      title: 'ES6 Modules ‚Äì Khi JavaScript h·ªçc c√°ch "s·ªëng g·ªçn g√†ng"',
      category: 'JavaScript',
      date: '14 Oct 2025',
      readTime: '7 ph√∫t',
      excerpt: 'Ng√†y x∆∞a, t·∫•t c·∫£ code nh√©t v√†o m·ªôt file app.js ‚Äì bug m·ªôt c√°i l√† c·∫£ web n·ªï tung üí£. ES6 Modules ƒë·∫øn, mang l·∫°i "h·∫°nh ph√∫c chia s·∫ª" cho dev to√†n c·∫ßu.',
      content: `
Ng√†y x∆∞a, t·∫•t c·∫£ code nh√©t v√†o m·ªôt file \`app.js\` ‚Äì bug m·ªôt c√°i l√† c·∫£ web n·ªï tung üí£.
ES6 Modules ƒë·∫øn, mang l·∫°i "h·∫°nh ph√∫c chia s·∫ª" cho dev to√†n c·∫ßu.

### C√°ch s·ª≠ d·ª•ng:

\`\`\`javascript
// math.js
export function add(a, b) { return a + b; }
export const PI = 3.14;

// main.js
import { add, PI } from './math.js';
console.log(add(3, 4)); // 7
console.log(PI); // 3.14
\`\`\`

### C√°c c√°ch export/import:

\`\`\`javascript
// Named export
export { add, subtract };

// Default export
export default class Calculator {}

// Import all
import * as Math from './math.js';
\`\`\`

### L·ª£i √≠ch:

üí° **L·ª£i √≠ch:** t√°i s·ª≠ d·ª•ng, b·∫£o tr√¨ d·ªÖ h∆°n, build nhanh h∆°n.

### M·∫πo vui:
üß† Dev chia module nh∆∞ d·ªçn nh√† ‚Äì ƒë·ª´ng ƒë·ªÉ t·∫•t c·∫£ logic ch·ªìng ch·∫•t trong \`index.js\`, tr√¥ng r·∫•t‚Ä¶ ƒëau ƒë·∫ßu.
      `
    },
    {
      id: 6,
      title: 'Async/Await ‚Äì L·∫≠p tr√¨nh b·∫•t ƒë·ªìng b·ªô "s·∫°ch s·∫Ω"',
      category: 'JavaScript',
      date: '12 Oct 2025',
      readTime: '9 ph√∫t',
      excerpt: 'Tr∆∞·ªõc ES8, ch√∫ng ta s·ªëng trong "ƒë·ªãa ng·ª•c callback". R·ªìi async/await ra ƒë·ªùi, v√† m·ªçi th·ª© tr·ªü n√™n thanh tho√°t.',
      content: `
Tr∆∞·ªõc ES8, ch√∫ng ta s·ªëng trong "ƒë·ªãa ng·ª•c callback":

\`\`\`javascript
getData(() => getMore(() => done()));
\`\`\`

üòµ‚Äçüí´ R·ªìi \`async/await\` ra ƒë·ªùi, v√† m·ªçi th·ª© tr·ªü n√™n thanh tho√°t.

### C√∫ ph√°p m·ªõi:

\`\`\`javascript
async function fetchData() {
  const res = await fetch('https://api.example.com');
  const data = await res.json();
  console.log(data);
}
\`\`\`

ƒê·ªçc t·ª´ tr√™n xu·ªëng, d·ªÖ hi·ªÉu, kh√¥ng c·∫ßn \`.then()\` ch·ªìng ch·∫•t.

### X·ª≠ l√Ω l·ªói:

\`\`\`javascript
async function getData() {
  try {
    const res = await fetch('/api');
    const data = await res.json();
    return data;
  } catch (error) {
    console.error('L·ªói:', error);
  }
}
\`\`\`

### Ch·∫°y song song:

\`\`\`javascript
// Ch·∫°y tu·∫ßn t·ª± (ch·∫≠m)
const a = await fetch('/api1');
const b = await fetch('/api2');

// Ch·∫°y song song (nhanh)
const [a, b] = await Promise.all([
  fetch('/api1'),
  fetch('/api2')
]);
\`\`\`

### M·∫πo nh·ªè:
üí¨ D√πng \`try...catch\` ƒë·ªÉ b·∫Øt l·ªói async.
Code ƒë·∫πp kh√¥ng ch·ªâ khi·∫øn dev kh√°c d·ªÖ ƒë·ªçc ‚Äî m√† c√≤n khi·∫øn ch√≠nh b·∫°n ƒë·ª° stress üòå.
      `
    },
    {
      id: 7,
      title: 'Exception Handling ‚Äì Khi l·ªói kh√¥ng c√≤n l√† "k·∫ª th√π"',
      category: 'Java',
      date: '10 Oct 2025',
      readTime: '7 ph√∫t',
      excerpt: 'Kh√¥ng c√≥ l·∫≠p tr√¨nh n√†o kh√¥ng l·ªói. Nh∆∞ng thay v√¨ ƒë·ªÉ app s·∫≠p, Java cho b·∫°n c√¥ng c·ª• "h√≤a gi·∫£i" v·ªõi l·ªói ‚Äì try/catch/finally.',
      content: `
Kh√¥ng c√≥ l·∫≠p tr√¨nh n√†o kh√¥ng l·ªói.
Nh∆∞ng thay v√¨ ƒë·ªÉ app s·∫≠p, Java cho b·∫°n c√¥ng c·ª• "h√≤a gi·∫£i" v·ªõi l·ªói ‚Äì \`try/catch/finally\`.

### C√∫ ph√°p c∆° b·∫£n:

\`\`\`java
try {
    int a = 5 / 0;
} catch (ArithmeticException e) {
    System.out.println("Oops! L·ªói chia cho 0 r·ªìi!");
} finally {
    System.out.println("D·ªçn d·∫πp t√†i nguy√™n...");
}
\`\`\`

### C√°c lo·∫°i Exception:

1. **Checked Exception**: Ph·∫£i x·ª≠ l√Ω (IOException, SQLException)
2. **Unchecked Exception**: Runtime (NullPointerException, IndexOutOfBounds)
3. **Error**: L·ªói h·ªá th·ªëng (OutOfMemoryError)

### T·∫°o Custom Exception:

\`\`\`java
class InvalidAgeException extends Exception {
    public InvalidAgeException(String message) {
        super(message);
    }
}

public void checkAge(int age) throws InvalidAgeException {
    if (age < 18) {
        throw new InvalidAgeException("Tu·ªïi ph·∫£i >= 18");
    }
}
\`\`\`

### Best Practices:

üí° **Tip:** t·∫°o custom Exception ƒë·ªÉ code "n√≥i chuy·ªán" r√µ r√†ng h∆°n.

Khi b·∫°n bi·∫øt ki·ªÉm so√°t l·ªói, b·∫°n kh√¥ng c√≤n s·ª£ bug ‚Äì b·∫°n "th∆∞∆°ng l∆∞·ª£ng" v·ªõi n√≥ üòé.
      `
    },
    {
      id: 8,
      title: 'Stream API ‚Äì Khi Java h·ªçc c√°ch "ng·∫Øn m√† ch·∫•t"',
      category: 'Java',
      date: '8 Oct 2025',
      readTime: '9 ph√∫t',
      excerpt: 'Tr∆∞·ªõc Java 8, ta vi·∫øt v√≤ng l·∫∑p for d√†i ngo·∫±ng ch·ªâ ƒë·ªÉ l·ªçc danh s√°ch. Gi·ªù th√¨ ch·ªâ c·∫ßn v√†i d√≤ng Stream l√† xong.',
      content: `
Tr∆∞·ªõc Java 8, ta vi·∫øt v√≤ng l·∫∑p for d√†i ngo·∫±ng ch·ªâ ƒë·ªÉ l·ªçc danh s√°ch.
Gi·ªù th√¨ ch·ªâ c·∫ßn v√†i d√≤ng Stream l√† xong.

### V√≠ d·ª• c∆° b·∫£n:

\`\`\`java
List<String> names = List.of("Clau", "S∆°n", "Thanh");
names.stream()
     .filter(n -> n.startsWith("T"))
     .map(String::toUpperCase)
     .forEach(System.out::println);
\`\`\`

### C√°c ph∆∞∆°ng th·ª©c ph·ªï bi·∫øn:

\`\`\`java
// Filter - l·ªçc
List<Integer> evens = nums.stream()
    .filter(n -> n % 2 == 0)
    .collect(Collectors.toList());

// Map - chuy·ªÉn ƒë·ªïi
List<String> upper = names.stream()
    .map(String::toUpperCase)
    .collect(Collectors.toList());

// Reduce - t·ªïng h·ª£p
int sum = nums.stream()
    .reduce(0, Integer::sum);

// Sorted - s·∫Øp x·∫øp
names.stream()
    .sorted()
    .forEach(System.out::println);
\`\`\`

### Parallel Stream:

\`\`\`java
// Ch·∫°y song song tr√™n nhi·ªÅu CPU
long count = bigList.parallelStream()
    .filter(condition)
    .count();
\`\`\`

### ∆Øu ƒëi·ªÉm:

üí¨ **∆Øu ƒëi·ªÉm:** ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc, v√† c√≥ th·ªÉ ch·∫°y song song (parallel).
Java 8 khi·∫øn ta c·∫£m gi√°c nh∆∞ ƒëang code JavaScript v·∫≠y üòÑ.
      `
    },
    {
      id: 9,
      title: 'Maven vs Gradle ‚Äì Tr·∫≠n chi·∫øn c·ªßa hai "√¥ng vua build"',
      category: 'Java',
      date: '6 Oct 2025',
      readTime: '6 ph√∫t',
      excerpt: 'N·∫øu Java l√† v∆∞∆°ng qu·ªëc, th√¨ Maven v√† Gradle l√† hai v·ªã vua tranh ng√¥i.',
      content: `
N·∫øu Java l√† v∆∞∆°ng qu·ªëc, th√¨ Maven v√† Gradle l√† hai v·ªã vua tranh ng√¥i.

### Maven - √îng vua truy·ªÅn th·ªëng:

\`\`\`xml
<!-- pom.xml -->
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>3.0.0</version>
    </dependency>
</dependencies>
\`\`\`

**∆Øu ƒëi·ªÉm:**
- Chu·∫©n m·ª±c, ·ªïn ƒë·ªãnh
- C·ªông ƒë·ªìng l·ªõn
- Convention over configuration

**Nh∆∞·ª£c ƒëi·ªÉm:**
- XML d√†i d√≤ng
- Build ch·∫≠m h∆°n Gradle

### Gradle - Vua m·ªõi hi·ªán ƒë·∫°i:

\`\`\`groovy
// build.gradle
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:3.0.0'
}
\`\`\`

**∆Øu ƒëi·ªÉm:**
- C√∫ ph√°p ng·∫Øn g·ªçn (Groovy/Kotlin DSL)
- Build nhanh h∆°n (incremental build)
- Linh ho·∫°t, d·ªÖ t√πy ch·ªânh

**Nh∆∞·ª£c ƒëi·ªÉm:**
- H·ªçc curve cao h∆°n
- Config ph·ª©c t·∫°p h∆°n

### So s√°nh nhanh:

| Ti√™u ch√≠ | Maven | Gradle |
|----------|-------|--------|
| T·ªëc ƒë·ªô build | Ch·∫≠m | Nhanh |
| C√∫ ph√°p | XML | Groovy/Kotlin |
| ƒê·ªô ph·ªï bi·∫øn | Cao | ƒêang tƒÉng |
| Android | ‚ùå | ‚úÖ |

### K·∫øt lu·∫≠n:

üí° D·ª± √°n nh·ªè? Maven l√† b·∫°n.
C·∫ßn t·ªëi ∆∞u t·ªëc ƒë·ªô? H√£y ch·ªçn Gradle.
C√≤n n·∫øu b·∫°n th√≠ch drama ‚Äì th·ª≠ chuy·ªÉn gi·ªØa hai c√°i ƒëi, b·∫°n s·∫Ω hi·ªÉu c·∫£m gi√°c "refactor c·∫£ linh h·ªìn" l√† th·∫ø n√†o üòÖ.
      `
    },
    {
      id: 10,
      title: 'Multithreading ‚Äì Khi Java bi·∫øt "ƒëa nhi·ªám nh∆∞ si√™u nh√¢n"',
      category: 'Java',
      date: '4 Oct 2025',
      readTime: '11 ph√∫t',
      excerpt: 'B·∫°n c√≥ 8 nh√¢n CPU m√† ch·ªâ d√πng 1 √†? Ph√≠ l·∫Øm! Java h·ªó tr·ª£ Thread ƒë·ªÉ ch·∫°y nhi·ªÅu vi·ªác c√πng l√∫c.',
      content: `
B·∫°n c√≥ 8 nh√¢n CPU m√† ch·ªâ d√πng 1 √†? Ph√≠ l·∫Øm!
Java h·ªó tr·ª£ **Thread** ƒë·ªÉ ch·∫°y nhi·ªÅu vi·ªác c√πng l√∫c.

### C√°ch t·∫°o Thread:

\`\`\`java
// C√°ch 1: Extends Thread
class MyThread extends Thread {
  public void run() {
    System.out.println("ƒêang ch·∫°y song song...");
  }
}
new MyThread().start();

// C√°ch 2: Implements Runnable
class MyTask implements Runnable {
  public void run() {
    System.out.println("Task ƒëang ch·∫°y...");
  }
}
new Thread(new MyTask()).start();

// C√°ch 3: Lambda (Java 8+)
new Thread(() -> System.out.println("Lambda thread")).start();
\`\`\`

### Thread Pool - Qu·∫£n l√Ω th√¥ng minh:

\`\`\`java
ExecutorService executor = Executors.newFixedThreadPool(4);

for (int i = 0; i < 10; i++) {
    executor.submit(() -> {
        System.out.println(Thread.currentThread().getName());
    });
}

executor.shutdown();
\`\`\`

### ƒê·ªìng b·ªô h√≥a (Synchronization):

\`\`\`java
class Counter {
    private int count = 0;
    
    public synchronized void increment() {
        count++;
    }
    
    public int getCount() {
        return count;
    }
}
\`\`\`

### Deadlock - C·∫©n th·∫≠n!

\`\`\`java
// ƒê·ª™NG l√†m th·∫ø n√†y!
synchronized(lock1) {
    synchronized(lock2) {
        // C√≥ th·ªÉ g√¢y deadlock
    }
}
\`\`\`

### Best Practices:

- D√πng **ExecutorService** thay v√¨ t·∫°o Thread th·ªß c√¥ng
- Tr√°nh **shared mutable state**
- S·ª≠ d·ª•ng **concurrent collections** (ConcurrentHashMap, CopyOnWriteArrayList)

Nhi·ªÅu thread gi√∫p app ph·∫£n h·ªìi nhanh, x·ª≠ l√Ω t√°c v·ª• n·∫∑ng m∆∞·ª£t m√†.
Nh∆∞ng qu·∫£n l√Ω thread kh√¥ng d·ªÖ ‚Äî tr√°nh deadlock, ƒë·ªìng b·ªô t√†i nguy√™n, v√†‚Ä¶ ƒë·ª´ng qu√™n ng·ªß nh√© (\`Thread.sleep()\`) üí§
      `
    },
    {
      id: 11,
      title: 'Lambda Expressions ‚Äì Khi Java h·ªçc t∆∞ duy "Functional"',
      category: 'Java',
      date: '2 Oct 2025',
      readTime: '8 ph√∫t',
      excerpt: 'Java t·ª´ng n·ªïi ti·∫øng "r∆∞·ªùm r√†", cho ƒë·∫øn khi Lambda ra ƒë·ªùi. Gi·ªù ta c√≥ th·ªÉ vi·∫øt code "ng·∫Øn nh∆∞ JS, m·∫°nh nh∆∞ Java".',
      content: `
Java t·ª´ng n·ªïi ti·∫øng "r∆∞·ªùm r√†", cho ƒë·∫øn khi **Lambda** ra ƒë·ªùi.
Gi·ªù ta c√≥ th·ªÉ vi·∫øt code "ng·∫Øn nh∆∞ JS, m·∫°nh nh∆∞ Java".

### Tr∆∞·ªõc v√† sau Lambda:

\`\`\`java
// Tr∆∞·ªõc Java 8
List<Integer> nums = Arrays.asList(1, 2, 3);
for (Integer n : nums) {
    System.out.println(n * 2);
}

// Sau Java 8 v·ªõi Lambda
nums.forEach(n -> System.out.println(n * 2));
\`\`\`

### C√∫ ph√°p Lambda:

\`\`\`java
// Kh√¥ng tham s·ªë
() -> System.out.println("Hello")

// M·ªôt tham s·ªë
x -> x * 2

// Nhi·ªÅu tham s·ªë
(a, b) -> a + b

// C√≥ return
(a, b) -> {
    int sum = a + b;
    return sum;
}
\`\`\`

### Functional Interface:

\`\`\`java
@FunctionalInterface
interface Calculator {
    int calculate(int a, int b);
}

Calculator add = (a, b) -> a + b;
Calculator multiply = (a, b) -> a * b;

System.out.println(add.calculate(5, 3)); // 8
System.out.println(multiply.calculate(5, 3)); // 15
\`\`\`

### Built-in Functional Interfaces:

\`\`\`java
// Predicate<T> - test ƒëi·ªÅu ki·ªán
Predicate<Integer> isEven = n -> n % 2 == 0;

// Function<T, R> - chuy·ªÉn ƒë·ªïi
Function<String, Integer> strLength = s -> s.length();

// Consumer<T> - x·ª≠ l√Ω kh√¥ng tr·∫£ v·ªÅ
Consumer<String> print = s -> System.out.println(s);

// Supplier<T> - cung c·∫•p gi√° tr·ªã
Supplier<Double> random = () -> Math.random();
\`\`\`

### K·∫øt h·ª£p v·ªõi Stream:

\`\`\`java
List<String> names = List.of("An", "B√¨nh", "Chi");

names.stream()
     .filter(n -> n.length() > 2)
     .map(String::toUpperCase)
     .forEach(System.out::println);
\`\`\`

Lambda bi·∫øn c√°c bi·ªÉu th·ª©c th√†nh "h√†m mini", gi√∫p Stream API ho·∫°t ƒë·ªông th·∫ßn k·ª≥.

üí¨ **Kinh nghi·ªám dev:** H·ªçc Lambda s·ªõm, b·∫°n s·∫Ω b·ªõt gh√©t Java üòÜ.
      `
    },
    {
      id: 12,
      title: 'Generics ‚Äì Vi·∫øt code th√¥ng minh v√† an to√†n h∆°n',
      category: 'Java',
      date: '1 Oct 2025',
      readTime: '10 ph√∫t',
      excerpt: 'Generics gi√∫p Java "ƒë·ªçc v·ªã" ki·ªÉu d·ªØ li·ªáu, ngƒÉn bug ki·ªÉu sai type. Kh√¥ng c√≤n c·∫£nh √©p ki·ªÉu Object n·ªØa!',
      content: `
Generics gi√∫p Java "ƒë·ªçc v·ªã" ki·ªÉu d·ªØ li·ªáu, ngƒÉn bug ki·ªÉu sai type.
Kh√¥ng c√≤n c·∫£nh √©p ki·ªÉu \`Object\` n·ªØa!

### V·∫•n ƒë·ªÅ tr∆∞·ªõc Generics:

\`\`\`java
// Tr∆∞·ªõc Java 5
List list = new ArrayList();
list.add("Hello");
list.add(123); // OK nh∆∞ng nguy hi·ªÉm!

String s = (String) list.get(1); // ClassCastException üí•
\`\`\`

### Gi·∫£i ph√°p v·ªõi Generics:

\`\`\`java
List<String> list = new ArrayList<>();
list.add("Hello");
// list.add(123); ‚ùå l·ªói compile - an to√†n!

String s = list.get(0); // Kh√¥ng c·∫ßn cast
\`\`\`

### Generic Class:

\`\`\`java
class Box<T> {
    private T value;
    
    public void set(T value) {
        this.value = value;
    }
    
    public T get() {
        return value;
    }
}

Box<Integer> intBox = new Box<>();
intBox.set(123);
int num = intBox.get(); // Kh√¥ng c·∫ßn cast

Box<String> strBox = new Box<>();
strBox.set("Hello");
String text = strBox.get();
\`\`\`

### Generic Method:

\`\`\`java
public class Utils {
    public static <T> void printArray(T[] array) {
        for (T element : array) {
            System.out.println(element);
        }
    }
}

Integer[] nums = {1, 2, 3};
String[] words = {"A", "B", "C"};

Utils.printArray(nums);
Utils.printArray(words);
\`\`\`

### Bounded Type Parameters:

\`\`\`java
// Ch·ªâ ch·∫•p nh·∫≠n Number v√† c√°c subclass
class NumberBox<T extends Number> {
    private T value;
    
    public double getDouble() {
        return value.doubleValue();
    }
}

NumberBox<Integer> intBox = new NumberBox<>(); // OK
NumberBox<Double> doubleBox = new NumberBox<>(); // OK
// NumberBox<String> strBox = new NumberBox<>(); ‚ùå Error
\`\`\`

### Wildcards:

\`\`\`java
// ? extends T - upper bound (read-only)
public void processNumbers(List<? extends Number> list) {
    for (Number n : list) {
        System.out.println(n.doubleValue());
    }
}

// ? super T - lower bound (write-only)
public void addIntegers(List<? super Integer> list) {
    list.add(1);
    list.add(2);
}
\`\`\`

### Generic trong Collections:

\`\`\`java
// Map v·ªõi generics
Map<String, Integer> scores = new HashMap<>();
scores.put("An", 95);
scores.put("B√¨nh", 87);

// Set v·ªõi generics
Set<String> names = new HashSet<>();
names.add("Clau");
\`\`\`

### L·ª£i √≠ch:

üí° **Generics = Type Safety + T√°i s·ª≠ d·ª•ng + Hi·ªáu su·∫•t.**

Khi b·∫°n vi·∫øt \`List<T>\` hay \`Map<K, V>\`, b·∫°n ƒëang d√πng ph√©p m√†u c·ªßa Generics.

Dev gi·ªèi kh√¥ng ch·ªâ vi·∫øt code ch·∫°y ƒë∆∞·ª£c, m√† c√≤n bi·∫øt ƒë·∫£m b·∫£o code kh√¥ng "n·ªï" v·ªÅ sau üî•.
      `
    }
  ];

  if (selectedPost) {
    const post = blogPosts.find(p => p.id === selectedPost);
    return (
      <div style={{minHeight: '100vh', backgroundColor: '#f8fafc'}}>
        <section style={{padding: '80px 0', backgroundColor: 'white'}}>
          <div style={{maxWidth: '900px', margin: '0 auto', padding: '0 24px'}}>
                  <button
              onClick={() => {
                setSelectedPost(null);
                window.history.pushState({}, '', '/my-blogprofile/#/blog');
                window.scrollTo({ top: 0, behavior: 'smooth' });
              }}
                    style={{
                display: 'inline-flex',
                alignItems: 'center',
                gap: '8px',
                      padding: '12px 24px',
                backgroundColor: '#f1f5f9',
                color: '#475569',
                      border: 'none',
                borderRadius: '12px',
                fontWeight: '600',
                      cursor: 'pointer',
                marginBottom: '32px',
                transition: 'all 0.3s ease'
                    }}
                  >
              ‚Üê Quay l·∫°i
                  </button>

                <div style={{
              display: 'inline-block',
              padding: '8px 16px',
              backgroundColor: post.category === 'JavaScript' ? '#fef3c7' : '#fee2e2',
              color: post.category === 'JavaScript' ? '#d97706' : '#dc2626',
                          borderRadius: '8px',
              fontSize: '14px',
              fontWeight: '600',
              marginBottom: '16px'
            }}>
              {post.category}
                        </div>

            <h1 style={{
              fontSize: '42px',
              fontWeight: 'bold',
              color: '#1e293b',
              marginBottom: '16px',
              lineHeight: '1.2'
            }}>
              {post.title}
            </h1>

                        <div style={{
                          display: 'flex',
              gap: '16px',
              fontSize: '14px',
              color: '#64748b',
              marginBottom: '32px'
            }}>
              <span>üìÖ {post.date}</span>
              <span>‚è±Ô∏è {post.readTime} ƒë·ªçc</span>
                        </div>

                    <div style={{
              fontSize: '18px',
              lineHeight: '1.8',
              color: '#334155'
            }}>
              {renderContent(post.content)}
                        </div>

                <div style={{
              marginTop: '64px',
                  padding: '32px',
              backgroundColor: '#f8fafc',
              borderRadius: '16px',
              borderLeft: '4px solid #6366f1'
            }}>
              <h3 style={{fontSize: '20px', fontWeight: 'bold', color: '#1e293b', marginBottom: '16px'}}>
                üí¨ T·ªïng k·∫øt
              </h3>
              <p style={{fontSize: '16px', color: '#475569', lineHeight: '1.7'}}>
                N·∫øu <strong>Java</strong> l√† k·ªπ s∆∞ tr∆∞·ªüng nghi√™m t√∫c lu√¥n lo v·ªÅ ƒë·ªô ·ªïn ƒë·ªãnh ‚òï<br/>
                Th√¨ <strong>JavaScript</strong> l√† ngh·ªá sƒ© t·ª± do, th√≠ch ph√° lu·∫≠t v√† t·∫°o trend üé®<br/><br/>
                H·ªçc c·∫£ hai, b·∫°n v·ª´a hi·ªÉu logic m√°y t√≠nh, v·ª´a hi·ªÉu t√¢m l√Ω ng∆∞·ªùi d√πng ‚Äî v√† ƒë√≥ ch√≠nh l√† s·ª©c m·∫°nh c·ªßa m·ªôt developer to√†n di·ªán üí™.
              </p>
            </div>

            {/* Navigation Buttons */}
            <div style={{
              marginTop: '48px',
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              gap: '16px',
              paddingTop: '32px',
              borderTop: '2px solid #e2e8f0'
            }}>
              {/* Previous Post */}
              {post.id > 1 ? (
                <button
                  onClick={() => setSelectedPost(post.id - 1)}
                              style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    padding: '14px 24px',
                    backgroundColor: 'white',
                    border: '2px solid #e2e8f0',
                    borderRadius: '12px',
                    color: '#475569',
                    fontWeight: '600',
                    fontSize: '15px',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = '#f8fafc';
                    e.currentTarget.style.borderColor = '#6366f1';
                    e.currentTarget.style.color = '#6366f1';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = 'white';
                    e.currentTarget.style.borderColor = '#e2e8f0';
                    e.currentTarget.style.color = '#475569';
                  }}
                >
                  ‚Üê B√†i tr∆∞·ªõc
                </button>
              ) : (
                <div></div>
              )}

              {/* Back to List */}
              <button
                onClick={() => {
                  setSelectedPost(null);
                  window.history.pushState({}, '', '/my-blogprofile/#/blog');
                  window.scrollTo({ top: 0, behavior: 'smooth' });
                }}
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px',
                  padding: '14px 28px',
                  backgroundColor: '#6366f1',
                  border: 'none',
                  borderRadius: '12px',
                  color: 'white',
                  fontWeight: '600',
                  fontSize: '15px',
                  cursor: 'pointer',
                  boxShadow: '0 4px 12px rgba(99, 102, 241, 0.3)',
                  transition: 'all 0.3s ease'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.backgroundColor = '#4f46e5';
                  e.currentTarget.style.transform = 'translateY(-2px)';
                  e.currentTarget.style.boxShadow = '0 6px 16px rgba(99, 102, 241, 0.4)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.backgroundColor = '#6366f1';
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 4px 12px rgba(99, 102, 241, 0.3)';
                }}
              >
                üìö Tr·ªü v·ªÅ danh s√°ch
              </button>

              {/* Next Post */}
              {post.id < blogPosts.length ? (
                <button
                  onClick={() => setSelectedPost(post.id + 1)}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    padding: '14px 24px',
                  backgroundColor: 'white',
                    border: '2px solid #e2e8f0',
                    borderRadius: '12px',
                    color: '#475569',
                    fontWeight: '600',
                    fontSize: '15px',
                    cursor: 'pointer',
                    transition: 'all 0.3s ease'
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = '#f8fafc';
                    e.currentTarget.style.borderColor = '#6366f1';
                    e.currentTarget.style.color = '#6366f1';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = 'white';
                    e.currentTarget.style.borderColor = '#e2e8f0';
                    e.currentTarget.style.color = '#475569';
                  }}
                >
                  B√†i ti·∫øp theo ‚Üí
                </button>
              ) : (
                <div></div>
              )}
            </div>

            {/* Related Posts */}
                <div style={{
              marginTop: '64px',
              padding: '32px',
                  backgroundColor: 'white',
                  borderRadius: '16px',
              border: '1px solid #e2e8f0'
            }}>
              <h3 style={{fontSize: '20px', fontWeight: 'bold', color: '#1e293b', marginBottom: '24px'}}>
                üìñ B√†i vi·∫øt c√πng ch·ªß ƒë·ªÅ
              </h3>
              <div style={{display: 'flex', flexDirection: 'column', gap: '16px'}}>
                {blogPosts
                  .filter(p => p.category === post.category && p.id !== post.id)
                  .slice(0, 3)
                  .map(relatedPost => (
                    <div
                      key={relatedPost.id}
                      onClick={() => setSelectedPost(relatedPost.id)}
                      style={{
                        padding: '16px',
                        backgroundColor: '#f8fafc',
                        borderRadius: '12px',
                        cursor: 'pointer',
                        transition: 'all 0.3s ease',
                        border: '1px solid #e2e8f0'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.backgroundColor = '#f1f5f9';
                        e.currentTarget.style.transform = 'translateX(8px)';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.backgroundColor = '#f8fafc';
                        e.currentTarget.style.transform = 'translateX(0)';
                      }}
                    >
                          <div style={{
                        display: 'inline-block',
                        padding: '4px 10px',
                        backgroundColor: relatedPost.category === 'JavaScript' ? '#fef3c7' : '#fee2e2',
                        color: relatedPost.category === 'JavaScript' ? '#d97706' : '#dc2626',
                        borderRadius: '6px',
                        fontSize: '11px',
                        fontWeight: '600',
                        marginBottom: '8px'
                      }}>
                        {relatedPost.category}
                        </div>
                      <h4 style={{
                        fontSize: '16px',
                        fontWeight: '600',
                        color: '#1e293b',
                        marginBottom: '8px'
                      }}>
                        {relatedPost.title}
                      </h4>
                      <div style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '12px',
                        fontSize: '13px',
                        color: '#64748b'
                      }}>
                        <span>{relatedPost.date}</span>
                        <span>‚Ä¢</span>
                        <span>{relatedPost.readTime} ƒë·ªçc</span>
                        <span style={{marginLeft: 'auto', color: '#6366f1', fontWeight: '600'}}>
                          ƒê·ªçc ngay ‚Üí
                        </span>
                          </div>
                          </div>
                  ))}
                          </div>
                          </div>
                        </div>
        </section>
                      </div>
    );
  }

  return (
    <div style={{minHeight: '100vh', backgroundColor: '#f8fafc'}}>
      {/* Hero Section */}
      <section style={{padding: '80px 0 64px', backgroundColor: 'white'}}>
        <div style={{maxWidth: '1200px', margin: '0 auto', padding: '0 24px'}}>
          <div style={{textAlign: 'center'}}>
            <h1 style={{fontSize: '48px', fontWeight: 'bold', color: '#1e293b', marginBottom: '16px'}}>
              üìö Blog - Chia s·∫ª ki·∫øn th·ª©c
            </h1>
            <p style={{fontSize: '18px', color: '#64748b', maxWidth: '800px', margin: '0 auto', lineHeight: '1.6'}}>
              12 b√†i vi·∫øt chuy√™n s√¢u v·ªÅ Java v√† JavaScript - Phong c√°ch dev n√≥i chuy·ªán v·ªõi dev, v·ª´a h·ªçc v·ª´a vui! üöÄ
            </p>
          </div>
        </div>
      </section>

      {/* Blog Posts Grid */}
      <section style={{padding: '64px 0'}}>
        <div style={{maxWidth: '1200px', margin: '0 auto', padding: '0 24px'}}>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fill, minmax(350px, 1fr))',
            gap: '24px'
          }}>
            {blogPosts.map(post => (
              <div
                key={post.id}
                onClick={() => setSelectedPost(post.id)}
            style={{
              backgroundColor: 'white',
                  borderRadius: '16px',
                  padding: '24px',
                  border: '1px solid #e2e8f0',
                  transition: 'all 0.3s ease',
                  cursor: 'pointer',
                  height: '100%',
                  boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-8px)';
                  e.currentTarget.style.boxShadow = post.category === 'JavaScript' 
                    ? '0 20px 40px rgba(99, 102, 241, 0.2)'
                    : '0 20px 40px rgba(239, 68, 68, 0.2)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 4px 6px -1px rgba(0, 0, 0, 0.1)';
                }}
              >
                <div style={{
                  display: 'inline-block',
                  padding: '6px 14px',
                  backgroundColor: post.category === 'JavaScript' ? '#fef3c7' : '#fee2e2',
                  color: post.category === 'JavaScript' ? '#d97706' : '#dc2626',
                  borderRadius: '8px',
                  fontSize: '12px',
                  fontWeight: '600',
                  marginBottom: '16px'
                }}>
                  {post.category}
                </div>
                <h3 style={{
                  color: '#1e293b',
                  fontSize: '20px',
                  fontWeight: '700',
                  marginBottom: '12px',
                  lineHeight: '1.4'
                }}>
                  {post.title}
                </h3>
                <p style={{
                  color: '#64748b',
                  fontSize: '15px',
                  lineHeight: '1.7',
                  marginBottom: '16px'
                }}>
                  {post.excerpt}
                </p>
                <div style={{
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  paddingTop: '16px',
                  borderTop: '1px solid #f1f5f9'
                }}>
                  <span style={{fontSize: '13px', color: '#94a3b8'}}>
                    {post.date} ¬∑ {post.readTime} ƒë·ªçc
                  </span>
                  <span style={{color: '#6366f1', fontWeight: '600', fontSize: '14px'}}>
                    ƒê·ªçc ti·∫øp ‚Üí
                  </span>
                </div>
            </div>
            ))}
          </div>
        </div>
      </section>
    </div>
  );
};

export default Blog;
